### In your second assignment your company is concerned that someone is leaking important intellectual property. As a safeguard you have been given the md5 has of the intellectual property and you must scan file locations to identify any files that match that hash. You will develop a new tool to automate this search.

## Situation Brief

Your organization maintains highly valued intellectual property. Over the last few months company leaders have grown suspicious that someone is collecting and celling intellectual property to your competitors. You have been asked to write a tool to search drives and identify the presence of specific intellectual property.

## Tool Requirements

You must develop a tool called "hash_search.py". The file that will contain your code has already been created in this folder. The tool must accept exactly two command line arguments.

- HASH: The first command line argument is an MD5 Hash of a file you want to search for.
- PATH: The second command line argument is the directory you must search.

Your tool will read the command line arguments that are passed to it and stored in the variable sys.argv. The MD5sum will be in sys.argv[1]. It will be referred to as "HASH" in this document. The path to search will be in sys.argv[2] and will be referred to as "PATH" in this document. You must open every file in PATH and calculate its MD5 ".hexdigest()" on the contents of the file using the "hashlib" module. The .hexdigest() method returns a string you will compare that to the HASH in the first command line argument. When you find whose calculated MD5 hexdigest that matches the HASH from the command line you will print the name of the file.

############### CODE ###############
#!/usr/bin/env python3
import sys
import hashlib
import os

def file_hash(complete_file_path):
    """Return the hash of the file at complete_file_path"""
    if not os.path.exists(complete_file_path):
        return "FILE NOT FOUND"

    try:
        with open(complete_file_path, 'rb') as f:
            contents = f.read()
            md5_hash = hashlib.md5(contents).hexdigest()
            return md5_hash
    except Exception:
        return "FILE NOT FOUND"

def main(target_hash, search_path):
    """Search for files in search_path that match hash"""
    try:
        files = os.listdir(search_path)
    except FileNotFoundError:
        return "NO MATCH FOUND"
    except NotADirectoryError:
        return "NO MATCH FOUND"


    for filename in files:
        full_path = os.path.join(search_path, filename)
        if os.path.isfile(full_path):
            current_hash = file_hash(full_path)
            if current_hash == target_hash:
                return filename

    return "NO MATCH FOUND"

# Do not edit below this line
if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("Usage: python3 hash_search.py <target_hash> <search_path>")
    else:
        result = main(sys.argv[1], sys.argv[2])
        print(result)
